#include<bits/stdc++.h>

vector<int> SL(vector<int>arr, int n)
{
    vector<int> v;
    stack<pair<int, int>> st;

    for (int i = 0; i < n; i++)
    {
        while (!st.empty() && st.top().first >= arr[i])
        {
            st.pop();
        }
        if (st.empty())
        {
            st.push({arr[i], i});
            v.push_back(-1);
        }
        else
        {
            v.push_back(st.top().second);
            st.push({arr[i], i});
        }
    }
    return v;
}
vector<int> SR(vector<int>arr, int n)
{
    vector<int> v;
    stack<pair<int, int>> st;

    for (int i = n-1; i >= 0; i--)
    {
        while (!st.empty() && st.top().first >= arr[i])
        {
            st.pop();
        }
        if (st.empty())
        {
            st.push({arr[i], i});
            v.push_back(-1);
        }
        else
        {
            v.push_back(st.top().second);
            st.push({arr[i], i});
        }
    }
    
    reverse(v.begin(),v.end());
    return v;
}

int largestRectangle(vector < int > & heights) {
   // Write your code here.
    int n  = heights.size();
    vector<int> sl, sr;
    sl = SL (heights,n);
    sr = SR (heights,n);

    // for(auto i:sl) cout<<i<<" ";cout<<endl;
    // for(auto i:sr) cout<<i<<" ";

    int ans = 0,left=0,right=0,curr=0;
    for(int i=0;i<n;i++)
    {
        if(sl[i]!=-1)
        {
            left = (i - sl[i] - 1)*heights[i];
        }else
        {
            left = (i-0)*heights[i];
        }

        if(sr[i]!=-1)
        {
            right = (sr[i]-i-1)*heights[i];
        }else
        {
            right = (n-1-i)*heights[i];
        }
        ans = max(ans,left+right+heights[i]);
    }
    return ans;
 }
